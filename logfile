#################
# chose dataset 
#################
# GSE 213994 from GEO
# PMID 37395319 (Okur et al. Aging cell 22: e13909 (2023)
# Paired end, 24.4 Gb
# 2 groups with 5 replicates each
# dataset added to spreadsheet, approved by teacher

# create folders on server : 
	# origScripts (unmodified scripts copied from data/scripts)
	# myScripts (edited)
	# testdir (to try out)
	# assigBIT09 (final versions)

###################
# download files
###################	

# test script for download

# 1) try fastq-dump for 1 sample into testdir
# not via script - only fastq-dump command on 1 sample, with 2 reads persample
# must use --gzip option and --split-3 because PE

fastq-dump --gzip --split-3 -X 2 -O testdir/ SRR21679459

# SRR21679459_2.fastq.gz file written to testdir

# 2) run script on all samples (but only 2 reads/sample)
# copy Accession list (with acc nrs) from NBCI GEO to testdir
# edit script for downloading to download only 2 runs per sample
fastq-dump --gzip -X 2
 
# in folder myScripts, adding SRR_Acc_list.txt to folder and output dit testdir
./bit09-download.sh SRR_Acc_list testdir PE

# --> all fastq.gz files generated (split into _1 and _2
# with 2 runs/sample

### bulk download
# run download of all samples in assigBIT09 folder
# output folder downloads
# remove -X 2 argument in bash script --> all reads get downloaded
# in tmux session download
./bit09-download-srr.sh SRR_Acc_List.txt downloads PE
# detach tmux session

# --> all downloads fastq.gz in folder downloads in assigBIT09


##########################
# fastqc preprocessing
##########################
# copy original bashscript bit09-fastqc.sh to myScripts

# bashscript requires 3 input parameters:
 1) path of folder with fastq.gz files (here: /home/erikf/assigBIT09/downloads)
 2) path of output folder (here : /home/erikf/assigBIT09/fastqc_output)
 3) number of threads

# testrun on 2 first samples (SRR21679459_1 and _2.fastq.gz) 
# put 2 fastq.gz files into folder testSubset, ans output into testOutput
./bit09-fastqc.sh /home/erikf/assigBIT09/testSubset/ /home/erikf/assigBIT09/testOutput/ 2

# transfer 2 .html files from /testOutput to local VM (folder assignment)
# html looks OK
 
# run entire QC on server in 8 threads (since low activity on server)
tmux attach -t download
./bit09-fastqc.sh /home/erikf/assigBIT09/downloads/ /home/erikf/assigBIT09/fastqc_output/ 8

# transfer all fastqc output files to local VM
# FTP via filezilla all .html to folder /BIT09/assignment/fastqc_results on VM

# run MultiQC on local VM in folder fastqc_results
# results in folder multiqc_data
# open file multiqc_report.html in firefox


########################## 
# Trimming
#######################
# search for overrepresented sequences using bit09-getAdapters-grep.sh
# greps in fastqc output for overrepresented sequences
# input:
	1) path with fastqc output
	2) number of overrep seq to be found
./bit09-getAdapters-grep.sh /home/erikf/assigBIT09/fastqc_output 4

# no overrept seqs found

# compose file of most common adapters
# from list in opt folder into assigBIT09 folder
cp /opt/Trimmomatic-0.39/adapters/* .
cat NexteraPE-PE.fa TruS* > adapters.fa
rm TruS*
rm Nex*

# bash script for Trimmomatic requires input (testrun)
 1) path of folder with input (test : testSubset = only runs from 1st sample)
 2) path of output folder (test : testOutputTrimm)
 3) adapter file (here: adapter.fa)
 4) number of threads
--> need to use PE file

./bit09-trimmomatic-PE.sh /home/erikf/assigBIT09/testSubset /home/erikf/testOutputTrimm/  /home/erikf/assigBIT09/adapters.fa 4

# run all samples
# folder for outpu from Trimmmomatic

# 8 threads = too much
./bit09-trimmomatic-PE.sh /home/erikf/assigBIT09/downloads /home/erikf/assigBIT09/outputTrimm/  /home/erikf/assigBIT09/adapters.fa 4

## problem with 59 and 63
# ?? only 3 files for sample 59 and 63 ??
# run trimmomatic again for these 2 samples
# in assigBIT09 folder
mkdir downloads2
mkdir outputTrimm2
# in downloads folder:copy downloads for sample 59 and 63 to download2
cp SRR21679459* ../downloads2
cp SRR21679463* ../downloads2

./bit09-trimmomatic-PE.sh /home/erikf/assigBIT09/downloads2 /home/erikf/assigBIT09/outputTrimm2/  /home/erikf/assigBIT09/adapters.fa 4

# result = OK
# for 53 and 59, all 4 fastq.gz files were made
# outputTrimm2 = new input folder for mapping
rm -r downloads2


##########################
# rerun fastqc
##########################
# bashscript requires 3 input parameters:
 1) path of folder with fastq.gz files (here: /home/erikf/assigBIT09/outputTrimm)
 2) path of output folder (here : /home/erikf/assigBIT09/outputFastQC_afterTrimm)
 3) number of threads


# run entire QC on server in 4 threads 
tmux attach -t download
./bit09-fastqc.sh /home/erikf/assigBIT09/outputTrimm/ /home/erikf/assigBIT09/outputFastQC_afterTrimm/ 4

# output in outputFastQC_afterTrimm op server
# transfer results naar folder fastqc_trimm_results op local VM for visualization of htlm

# run multiqc


###############################
# mapping
###############################
# on server, starting from output from trimmomatic (.fastqc.gz files)

### testrun
# test script bit09-mapping-hisat2-PE on server, on 1 sample
# in subfolder myScripts
# copy from outputTrimm to folder myScripts 
mkdir testdir2
cp SRR21679461* ../../myScripts/
cp *fastq.gz testdir2/
rm -r SRR216
# (since only .Fastqc.gz files are needed --> only these copied to testdir2
# run mapping from 1 sample inp tmux session
bash bit09-mapping-hisat2-PE.sh testdir2 /data/igenomes/hisat2-index-mm10_genome/genome hisat2-test-mm10 4

# results in hista2-test-mm10 (.bam file, 2 unmapped files)

### run complete analysis
# use index file from mouse grcm38 instead of mm10
bash bit09-mapping-hisat2-PE.sh outputTrimm /data/igenomes/hisat2-index-grcm38_genome_tran/genome_tran hisat2-mapping-grcm38 4

### problem with 59 and 63
# for 59 and 63, output = missing dus to missing files after Trimmomatic
# Trimmomatic = re-ran (see above) , missing files ion outputTrimm2
# run mapping for samples 59 and 63 with output in hisat2-mapping-grcm38_2
bash bit09-mapping-hisat2-PE.sh outputTrimm2 /data/igenomes/hisat2-index-grcm38_genome_tran/genome_tran hisat2-mapping-grcm38_2 4
# werkt OK --> files made within output folder hisat2-mapping-grcm38_2

# move all mapping output from hisat2-mapping-grcm38_2 into hisat2-mapping-grcm38 where other .bam files are
mv * ../hisat2-mapping-grcm38
rm -r hisat2-mapping-grcm38_2

# move output from Trimmomatic from 59 and 63 from outputTrimm2 to folder outputTrimm (where other output is)
mv * ../outputTrimm
rm -r outputTrimm2
 
 
###################
# Samtools
###################
copy bash script to myScripts
cp bit09-filtering-samtools.sh ../myScripts/

# arguments:
        1. Path of the folder with mapping files to run samtools on : /home/erikf/assigBIT09/hisat2-mapping-grcm38
        2. MAPping Quality value to filter : 20
        3. Path of the output folder : /home/erikf/assigBIT09/outputSamtools
        4. Number of threads to use  : 4

mkdir outputSamtools (in folder assig)

# in folde myScripts (with tmux)
bash bit09-filtering-samtools.sh /home/erikf/assigBIT09/hisat2-mapping-grcm38 20 /home/erikf/assigBIT09/outputSamtools 4 


#################
# IGV 
################## add screenshot to report !!!!
# must be run locally on VM
# create subfolder IGV in /media/sf_SF_CentOS shared folder on VM 
# transfer necessary files using filezilla for 2 samples (60 and 67 = one for each treat group
	filtered_sorted.bam	/home/erikf/assigBIT09/outputSamtools/SRR21679460_filtered_sorted.bam
	filtered_sorted.bam.bai	/home/erikf/assigBIT09/outputSamtools/SRR21679460_filtered_sorted.bam.bai

genes.gtf and genome.fa already in IGV --> not needed

# gene of interst for assignment : Cidec, Pck1, Plin1 = differentially expressed
# search in UCSC, mouse grcm28/mm10
Cidec : chr6:113,424,634-113,435,760
Actb (house keeping gene) : chr5:142,903,115-142,906,754
load in filtered_sorted.bam
screenshots from Actb en Pck1 for samples 60 and 67 on Windows Howest/BIT09/assignment


#########################
# HTseq count
#########################

# new script (-2024) needs 9 input parameters
	1. Path of the folder with the mapping files to run HTSeqCount on. 
			/outputSamtools
        2. Path of the GTF file.
        		/data/igenomes/Mus_musculus/UCSC/mm10/Annotation/Genes/genes.gtf
        3. Path of the output folder
        		mkdir outputHTseq
        		/home/erikf/assigBIT09/outputHTseq
        4. Feature type to use from GTF file (e.g. CDS, exon).
        		exon
        5. Attribute to use as label for counting (e.g. gene_id, gene_name, transcript_id).
        		gene_id
        6. Specify library layout either PE (paired end) or SE (single end).
        		PE
        7. Specify strandedness either YES (HTSeq default) or NO  (or REVERSE).
        		YES
        8. Mode either intersection-strict or union (HTSeq default).
        		intersection-strict
        9. Number of threads to use.
        		4
# testrun with only 3 .bam files from first dsample, in testdir/testHTseq
./bit09-htseqcount-2024.sh /home/erikf/testdir/testHTseq /data/igenomes/Mus_musculus/UCSC/mm10/Annotation/Genes/genes.gtf /home/erikf/assigBIT09/outputHTseq exon gene_id PE NO intersection-strict 4

# full analysis
./bit09-htseqcount-2024.sh /home/erikf/assigBIT09/outputSamtools /data/igenomes/Mus_musculus/UCSC/mm10/Annotation/Genes/genes.gtf /home/erikf/assigBIT09/outputHTseq exon gene_id PE YES intersection-strict 4


